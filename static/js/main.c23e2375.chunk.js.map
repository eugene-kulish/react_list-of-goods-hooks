{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","sortFieldNone","sortField","setSortField","isReversed","setIsReversed","visibleOrder","goods","orderedField","sort","good1","good2","sortFieldName","localeCompare","sortFieldLength","length","reverse","sortGoodsByParams","className","type","cn","onClick","reversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qBAAAA,E,yBAAAA,E,kBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,eAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,WAEPI,EAAY,YAAOD,GAqBzB,OAnBIL,GACFM,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKL,EAAUe,cACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,gBACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAaQ,UAGRR,EAOcS,CACnBnB,EACA,CAAEI,YAAWE,eAGf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYlB,IAAcL,EAAUe,gBAExCS,QAAS,kBAAMlB,EAAaN,EAAUe,gBANxC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYlB,IAAcL,EAAUiB,kBAExCO,QAAS,kBAAMlB,EAAaN,EAAUiB,kBANxC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAA2B,IAAfhB,IAEhBiB,QAAS,WACPhB,GAAc,SAAAiB,GAAQ,OAAKA,MAP/B,sBAaiB,KAAdpB,IAAmC,IAAfE,IACrB,wBACEe,KAAK,SACLD,UAAWE,IAAG,6BACdC,QAAS,WACPlB,EAAaN,EAAUI,eACvBI,GAAc,IALlB,sBAaJ,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCxHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c23e2375.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  sortFieldName = 'name',\n  sortFieldLength = 'length',\n  sortFieldNone = '',\n}\n\ntype SortParams = {\n  sortField: SortField;\n  isReversed: boolean;\n};\n\nfunction sortGoodsByParams(\n  goods: string[],\n  { sortField, isReversed }: SortParams,\n): string[] {\n  const orderedField = [...goods];\n\n  if (sortField) {\n    orderedField.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.sortFieldName:\n          return good1.localeCompare(good2);\n\n        case SortField.sortFieldLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    orderedField.reverse();\n  }\n\n  return orderedField;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.sortFieldNone);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleOrder = sortGoodsByParams(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortField !== SortField.sortFieldName },\n          )}\n          onClick={() => setSortField(SortField.sortFieldName)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortField !== SortField.sortFieldLength },\n          )}\n          onClick={() => setSortField(SortField.sortFieldLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={() => {\n            setIsReversed(reversed => !reversed);\n          }}\n        >\n          Reverse\n        </button>\n\n        {((sortField !== '' || isReversed === true) && (\n          <button\n            type=\"button\"\n            className={cn('button is-danger is-light')}\n            onClick={() => {\n              setSortField(SortField.sortFieldNone);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        ))}\n      </div>\n\n      <ul>\n        {visibleOrder.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}